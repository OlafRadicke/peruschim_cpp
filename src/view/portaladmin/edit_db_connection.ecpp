<%pre>
    // put your includes here
    // #include "foo.h"
    #include <iostream>
    #include "../../model/AccountData.h"
    #include "../../model/WebACL.h"
    #include "../../model/TeamDataBase.h"
    #include "../../model/TeamDataBaseManager.h"
    #include "../../model/UserSession.h"
    
    # define ERROR std::cerr << "[" << __FILE__ << ":" << __LINE__ << "] " <<
    # define DEBUG std::cout << "[" << __FILE__ << ":" << __LINE__ << "] " <<
</%pre>

<%args>
    // define the query parameters
    std::string account_name = "";
    std::string server_name = "";
    std::string database_name = "";
    std::string port_no = "";
    std::string db_encoding = "";
    std::string db_user = "";
    std::string db_password = "";
    std::string db_sslmode = "";
    std::string owner_id = "";
    std::string save = "";
    std::string delet = "";
    std::string load = "";
    std::string database_id = "";

</%args>
<%session scope="global">
    // define your session scope variables here
    // std::string mySessionState;
    // userSession;
    UserSession userSession;
</%session>

<%session scope="page">
    std::string loadedTeamDataBaseID = "";
</%session>

<%cpp>
    // ACL Check
    if ( userSession.isInRole ( "admin" ) == false ) {
        DEBUG "Nicht autorisiert!!" << std::endl;
        return reply.redirect ( "/access_denied" );
    };
    DEBUG "Autorisiert!!" << std::endl;

    std::vector<AccountData> accountDatas;
    std::vector<TeamDataBase> dataBaseList;
    std::string feedback = "";
    TeamDataBase teamDataBase;

    // values sets
    std::string value_account_name = "";
    std::string value_server_name = "";
    std::string value_database_name = "";
    std::string value_port_no = "0";
    std::string value_db_encoding = "";
    std::string value_db_user  = "";
    std::string value_db_password  = "";
    std::string value_db_sslmode = "";
    std::string value_owner_id = "";
    
    
    // is button "Speichern" kicked?
    if ( save == "Speichern" ) {
        DEBUG "loadedTeamDataBaseID: " << loadedTeamDataBaseID << std::endl;
        if ( loadedTeamDataBaseID == "" ) {
            feedback = "Datenbankverbindung wurde NICHT gespeichert! Es wurde kein Datensatz ausgewählt.";
        } else {
            teamDataBase.setAccount_id ( loadedTeamDataBaseID );
            DEBUG "account_name: " << account_name << std::endl;
            teamDataBase.setAccount_name ( account_name );
            DEBUG "server_name: " << server_name << std::endl;
            teamDataBase.setServer_name ( server_name );
            DEBUG "database_name: " << database_name << std::endl;
            teamDataBase.setDatabase_name ( database_name );
            DEBUG "port_no: " << port_no << std::endl;
            teamDataBase.setPort_no ( port_no );
            DEBUG "db_encoding: " << db_encoding << std::endl;
            teamDataBase.setDB_encoding ( db_encoding );
            DEBUG "db_user: " << db_user << std::endl;
            teamDataBase.setDB_user ( db_user );
            DEBUG "db_password: " << db_password << std::endl;
            teamDataBase.setDB_password ( db_password );
            DEBUG "db_sslmode: " << db_sslmode << std::endl;
            teamDataBase.setDB_sslmode ( db_sslmode );
            DEBUG "owner_id: " << owner_id << std::endl;
            teamDataBase.setOwner_id ( owner_id );
            
            teamDataBase.saveChanges ( );
            feedback = "Datenbankverbindung wurde gespeichert!";
        }
    // is button "Löschen" kicked?
    } else if ( delet == "Löschen" ) {
        DEBUG "Daten löschen..." << std::endl;
        DEBUG "account_name: " << account_name << loadedTeamDataBaseID << std::endl;
        teamDataBase.setAccount_id ( loadedTeamDataBaseID );
        teamDataBase.deleteConnection ( );
        feedback = "Datenbankverbindung wurde \"" + account_name + "\" mit der ID " ;
        feedback += loadedTeamDataBaseID + " wurde gelöscht.";


    // is button "laden" kicked?
    } else if ( load == "laden" ) {
        DEBUG "Daten laden..." << std::endl;
        DEBUG "database_id: " << database_id << std::endl;
        accountDatas =  WebACL::getAllAccounts ( );  
        dataBaseList = TeamDataBaseManager::getAllTeamDataBases ( );
        for ( unsigned int i=0; i<dataBaseList.size(); i++) {
            if ( dataBaseList[i].getAccount_id () == database_id ) {
                loadedTeamDataBaseID = database_id;
                value_account_name = dataBaseList[i].getAccount_name ();
                value_server_name = dataBaseList[i].getServer_name ();
                value_database_name = dataBaseList[i].getDatabase_name ();
                value_port_no = dataBaseList[i].getPort_no ();
                value_db_encoding = dataBaseList[i].getDB_encoding ();
                value_db_user  = dataBaseList[i].getDB_user ();
                value_db_password  = dataBaseList[i].getDB_password ();
                value_db_sslmode = dataBaseList[i].getDB_sslmode ();
                DEBUG "value_db_sslmode: " << value_db_sslmode << std::endl;
                value_owner_id = dataBaseList[i].getOwner_id ();
            }
        }


    } else {
        accountDatas =  WebACL::getAllAccounts ( );  
        dataBaseList = TeamDataBaseManager::getAllTeamDataBases ( );

    }
    

</%cpp>


<!DOCTYPE HTML>
<html>
<head>
    <title>Neuen Datenbankverbindung anlegen</title>
    <meta charset = "UTF-8" />
    <& "style" &>
</head>
<body>
    <& "header" &>
    <br />
    <& "mainmenu" &>
    <br />

    <div class="innergroupbox">

        <h1>Neuen Datenbankverbindung anlegen</h1>

% if ( feedback != "" ) {

        <div class="feedback-box">
            <b><$ feedback $> </b>
        </div>

% } else {
        <form method="post" >
            <p>Verbindung zum bearbeiten auswählen: 
                <select name="database_id" 
                        size="1" >
%               for ( unsigned int i=0; i<dataBaseList.size(); i++) {
                    <option value="<$  dataBaseList[i].getAccount_id() $>"><$ dataBaseList[i].getAccount_name() $></option>
%               }
                </select>
                <input type="submit" name="load" value="laden">
            </p>
            <p>Aktuel geladen und angezeigt wird die Verbindung mit der ID: <$ loadedTeamDataBaseID $> </p>
            <div class="innergroupbox">
                <p>Verbindungsname*:<br><input 
                        name="account_name" 
                        type="text" 
                        size="40" 
                        maxlength="80" 
                        value="<$ value_account_name $>" ></p>
                <p>Server-Name*:<br><input 
                        name="server_name" 
                        type="text" 
                        size="40" 
                        maxlength="80" 
                        value="<$ value_server_name $>" ></p>
                <p>Datenbank-Name*:<br><input 
                        name="database_name" 
                        type="text" 
                        size="40" 
                        maxlength="80"
                        value="<$ value_database_name $>" ></p>
                <p>Port-Nummer*:<br><input 
                        name="port_no" 
                        type="number"   
                        min="0" 
                        max="9999" 
                        value="<$ value_port_no $>" ></p>
                <p>Encoding*:<br><input 
                        name="db_encoding" 
                        type="text" 
                        size="15" 
                        maxlength="15" 
                        required="required"
                        value="<$ value_db_encoding $>" ></p>
                <p>Datenbank-User-Name*:<br><input 
                        name="db_user" 
                        type="text" 
                        size="40" 
                        maxlength="80" 
                        value="<$ value_db_user $>"></p>
                <p>Passwort*:<br><input 
                        name="db_password" 
                        type="text" 
                        size="40" 
                        maxlength="80" 
                        value="<$ value_db_password $>" ></p>
                <p>ssl-Mode*:<br>
                    <select name="db_sslmode" size="1">
%                   if ( value_db_sslmode == "true" ) {
                        <option selected value="true">true</option>
                        <option value="false">false</option>
%                   } else {
                        <option value="true">true</option>
                        <option selected value="false">false</option>
%                   }
                    </select>
                    </p>
                <p>Eigentümer der Verbindung*:<br>
                    <select name="owner_id" size="1">
%                   for ( unsigned int i=0; i<accountDatas.size(); i++) {
%                       if ( owner_id == accountDatas[i].getID() ) {
                            <option selected value="<$  accountDatas[i].getID() $>"><$ accountDatas[i].getLogin_name() $></option>
%                       } else {
                            <option value="<$  accountDatas[i].getID() $>"><$ accountDatas[i].getLogin_name() $></option>
%                       }
%                   }
                    </select>
                    </p>
                <p><input id="save_button" type="submit" name="save" value="Speichern"> <input id="delet_button" type="submit" name="delet" value="Löschen"></p>
            </div>
        </form>
% }
    </div>
</body>
</html>